O que é o GIT?

--> É o SISTEMA DE CONTROLE DE VERSÃO MAIS UTILIZADO DO MUNDO atualmente.
--> O Git é baseado em REPOSITÓRIOS, que contêm todas as versões do código e também as cópias de cada desenvolvedor.
--> Todas as operações do Git SÃO OTIMIZADAS PARA TER ALTO DESEMPENHO.
--> Todos os objetos do Git são PROTEGIDOS COM CRIPTOGRAFIA para evitar alterações indevidas e maliciosas.
--> O Git é um PROJETO DE CÓDIGO ABERTO.

O que é controle de versão?

--> É uma técnica que ajuda a GERENCIAR O CÓDIGO-FONTE de uma aplicação.
--> Registrando TODAS AS MODIFICAÇÕES de códigos, podendo revertê-las.
--> Criar versões de um software em diferentes estágios, podendo ALTERAR FACILMENTE ENTRE ELAS.
--> Cada membro da equipe pode trabalhar em uma versão diferente.
--> Há ferramentas para trabalhar o controle de versão como GIT e SVN.

==========================================================

Comandos do GIT:

--> git init: cria um repositório.

--> git status: verifica o status do Git, as pastas e os arquivos ali presentes.

--> git add: adiciona arquivos ao Git.

--> git add . : adiciona todos os arquivos de uma vez só.

--> git remote -v: verifica a origem à qual você está conectado, "origin https://github.com/danielpedroo/Curso_GitHub.git (push)".

--> git remote rm ______: remove a origem à qual você está conectado, basta colocar o nome da origem na parte sublinhada.

--> git branch -M _____: aqui você seleciona o caminho da branch, seja main, master ou outro nome escolhido.

--> git push -u origin main e/ou git push: aqui você envia os dados comitados para o servidor.

--> git pull: busca os arquivos do repositório, isso não precisa estar em uma máquina local.

--> git clone: clona o repositório no servidor remoto.

--> git rm _____: remove o arquivo no repositório, na área sublinhada deve ser colocado o nome do arquivo e sua extensão.

--> git log: mostra as modificações que foram feitas no projeto e/ou commits.

U: Untracked (O arquivo ou pasta necessita de um Add)
A: Add (Adicionado)
M: Modified (Modificado)
D: Deleted (Deletado)

==========================================================

--> git commit -m "Update": Você faz um commit e envia uma mensagem de atualização.
Exemplo: git commit arquivo.txt -m "Texto Alterado".

==========================================================

--> git commit -a -m "Update": Você comita diversos arquivos de uma vez só.
Exemplo: git commit -a -m "Texto Alterado" --> A letra -a significa todos os arquivos.

==========================================================

--> git mv: podemos renomear um arquivo e movê-lo para outra pasta.
Exemplo: git mv ______ (<-- nome do arquivo e sua extensão) _______ (<-- pasta para onde será movido).
git mv rodape.css css/rodape.css.

Para renomear, é necessário colocar o nome antigo e depois o nome novo.
Exemplo: git mv css/rodape.css css/rodape_inicial.css.

==========================================================

--> git checkout: funciona como um "ctrl-z", o arquivo volta ao estado anterior.
Isso significa que ele remove as notificações de "modificado".

Comando: git checkout css (<-- nome da pasta) / style.css (<-- nome do arquivo e sua extensão).
git checkout css/style.css.

==========================================================

--> gitignore: ignora arquivos de um projeto.
Mas, para isso, deve ser criado um arquivo .gitignore na pasta onde deseja ignorar,
e dentro deste arquivo, colocar os nomes dos arquivos a serem ignorados
ANTES de criar os arquivos.

Exemplo:

.gitignore:
l.txt
z.css
pasta_ignorada/ <-- neste caso, deve ser colocado o nome da pasta e um símbolo /*
(Exemplo: pasta_ignorada/* <-- assim, seus atributos e/ou arquivos serão ignorados)
Estes arquivos serão automaticamente ignorados.

==========================================================

--> git reset: reseta mudanças feitas, mas TODAS AS ALTERAÇÕES COMMITADAS E TAMBÉM AS PENDENTES SERÃO EXCLUÍDAS.

Exemplo: git reset --hard origin/master
git reset --hard (<-- Tag) origin/master (<-- branch)

==========================================================

