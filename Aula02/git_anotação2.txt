O que são Branches?

--> Branches são a forma do Git separar as versões dos projetos.

Criar Branch:

git branch: Aqui você visualiza a branch na qual você está.
git branch ____ (nome do branch): Aqui você cria a branch, basta colocar o nome na parte sublinhada.
Deletar Branches:

git branch -D/--delete _____ (nome do branch): Aqui você deleta a branch criada.
Exemplo: git branch Cap_Branchs -d (também serve desta forma).
Mudando de branch:

git checkout -b nome: Aqui você troca de branch, criando e mudando automaticamente, levando as alterações junto.
git checkout ____ (nome do branch): Aqui você troca de branch.
OBS: Ao alterar a branch, você pode levar alterações não commitadas junto, TENHA CUIDADO.
"SEMPRE COMMITAR ANTES".

Regras:

Enquanto estiver em uma branch, não saia dela até dar um commit.
Faça branches a partir da branch master/main.
Atualize o seu repositório através do git push.

========================

Unindo branches:

git merge _____ (nome do branch): A partir desta branch selecionada, você envia todos os dados alterados para o branch atual.
Este comando faz o commit automaticamente, facilitando quando outros desenvolvedores fazem clone ou push dos dados.
No entanto, após o comando merge, é necessário fazer um git push para atualizar o repositório.
Exemplo: git merge Cap_teste.

========================

Stash:

git stash: Salva as modificações atuais para prosseguir com outra abordagem de solução e não perder o código.
OBS: O git stash funciona como se você colocasse algo na lixeira, ele apenas SALVA o que você fez até aquele ponto X
e reseta até o ponto em que você começou.
Por exemplo: se ele estava em Z, salva e volta para D.
OBS: Ele só volta em arquivos que estão na área de transferência e/ou local (apenas arquivos em M - Modified).

git stash list: Exibe a lista de stash.

git stash apply ___ (id da stash): Recupera a stash.
Exemplo: git stash apply 1.

Removendo Stash:

git stash clear: Limpa todas as stash de uma branch.
git stash drop ____ (id da stash): Limpa a stash selecionada.
========================

Criando Tags:

git tag -a ___ (nome da tag) -m "mensagem a atribuir": Este comando serve como um checkpoint de um branch.
Verificando e alterando Tags:

git show _____ (nome da tag): Com este comando, você verifica a tag.
git checkout _____ (nome da tag): Com este comando, você troca para a tag.
Enviando Tags ao repositório Git:

git push origin _____ (nome da tag): Envia a tag selecionada.
git push origin --tags: Envia todas as tags ao repositório Git.

========================