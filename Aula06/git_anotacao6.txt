A importância de um commit:

Problema: Commits sem sentido atrapalham o projeto.

OBS: Precisamos padronizar os commits para que o projeto cresça de forma saudável. Isso também ajuda em:

Revisão de pull requests.
Melhoria dos logs no git log.
Manutenção do projeto.

===========================

Branches com commits ruins:

Contudo, há uma solução chamada private branches.

Estas branches não serão compartilhadas no repositório, então podemos colocar qualquer commit.
git checkout -b private_ _____ (nome da branch já criada): este comando mantém a branch local e privada.
Feito isso, podemos, no final, fazer um rebase.

git rebase ___ (nome da branch atual) _____ (nome da branch privada) -i (interativo).
Dentro do rebase, com o terminal ativo, você terá os commits feitos.

Todos eles estarão com a propriedade PICK.
Se essa propriedade permanecer, todos os commits serão levados para o remoto.
Temos também as propriedades SQUASH (excluir) e REWORD (renomear).
Após terminar suas opções, basta pressionar ESC e colocar no terminal :x! para salvar o arquivo.
Na parte de excluir e renomear, se tiver opções indesejadas, basta colocar o # atrás da palavra para comentá-las automaticamente.

===========================

Os processos de uma branch saudável são:

Branch privada.
Commits variados.
Limpeza através do rebase.
Fazer merge com a main/master.

===========================

Boas mensagens de commit:

Separar o assunto do corpo da mensagem.
Assunto com no máximo 50 caracteres.
Assunto com letra inicial maiúscula.
Corpo com no máximo 72 caracteres.
Explicar o POR QUE e COMO do commit, e não como o código foi escrito.
Para obter mais espaço na hora do texto do commit, apenas exclua a aspa de fechamento:

git commit -a -m "POR QUE e COMO do commit.


===========================